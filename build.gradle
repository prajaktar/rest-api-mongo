plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.learning'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
}

task gitExecutableHooks() {
	Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
}

task installGitHooks(type: Copy) {
	from new File(rootProject.rootDir, 'pre-push')
	into { new File(rootProject.rootDir, '.git/hooks') }
	fileMode 0777
}

afterEvaluate {
	gitExecutableHooks.dependsOn installGitHooks
	check.dependsOn gitExecutableHooks
}


jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
	finalizedBy jacocoTestCoverageVerification
	useJUnitPlatform()
}

def coverageExcludes = [
		'**/common*',
		'**/*Application*'
]

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude:  coverageExcludes)
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude:  coverageExcludes)
		}))
	}
	violationRules { rule { limit { minimum = 0.90 } } }
}
